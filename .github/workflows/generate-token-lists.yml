name: Generate token lists

on:
  schedule:
    - cron: '0/10 * * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        type: environment
        default: PR
        required: true

jobs:
  install:
    name: 'Install'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Check cache for "node_modules"
        id: cache
        uses: martijnhols/actions-cache/check@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Save "node_modules" to cache
        if: steps.cache.outputs.cache-hit != 'true'
        uses: martijnhols/actions-cache/save@v3
        with:
          path: '**/node_modules'
          key: ${{ steps.cache.outputs.primary-key }}

  fetchWhitelist:
    name: 'Fetch whitelist'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: install
    permissions:
      id-token: write # need this for OIDC
      contents: read # This is required for actions/checkout@v2
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: 'us-west-2'
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 'Fetch'
        run: aws s3 cp s3://${{ secrets.AWS_BUCKET }}/ArbTokenLists/arbed_arb_whitelist_era.json ./src/ArbTokenLists/arbed_arb_whitelist_era.json

      - uses: actions/cache@v3
        id: cache-whitelist
        with:
          path: ./src/ArbTokenLists/arbed_arb_whitelist_era.json
          key: ${{ github.sha }}

  generate-token-list:
    name: 'Generate'
    runs-on: ubuntu-latest
    environment: CI
    needs: [install, fetchWhitelist]
    permissions:
      id-token: write # need this for OIDC
      contents: read # This is required for actions/checkout@v2
    strategy:
      max-parallel: 5
      fail-fast: false
      matrix:
        commands:
          - name: Arb1 FullList
            command: yarn fullList --l2NetworkID 42161
          - name: Test slack error 1
            command: yarn exit 1
          - name: Test slack error 2
            command: yarn exit 2

          # - name: Arb1 Arbify Uniswap
          #   command: yarn arbify --l2NetworkID 42161 --tokenList https://tokens.uniswap.org --newArbifiedList ./src/ArbTokenLists/arbed_uniswap_labs.json
          # - name: Arb1 Arbify Gemini
          #   command: yarn arbify --l2NetworkID 42161 --tokenList https://www.gemini.com/uniswap/manifest.json --newArbifiedList ./src/ArbTokenLists/arbed_gemini_token_list.json
          # - name: Arb1 Arbify CMC
          #   command: yarn arbify --l2NetworkID 42161 --tokenList https://api.coinmarketcap.com/data-api/v3/uniswap/all.json --newArbifiedList ./src/ArbTokenLists/arbed_coinmarketcap.json
          # - name: Arb1 Update Whitelist
          #   command: yarn update --l2NetworkID 42161 --tokenList ./src/ArbTokenLists/arbed_arb_whitelist_era.json --includeOldDataFields true

          # - name: ArbNova Arbify Uniswap
          #   command: yarn arbify --l2NetworkID 42170 --tokenList https://tokens.uniswap.org --newArbifiedList ./src/ArbTokenLists/42170_arbed_uniswap_labs.json
          # - name: ArbNova Arbify Gemini
          #   command: yarn arbify --l2NetworkID 42170 --tokenList https://www.gemini.com/uniswap/manifest.json --newArbifiedList ./src/ArbTokenLists/42170_arbed_gemini_token_list.json
          # - name: ArbNova Arbify CMC
          #   command: yarn arbify --l2NetworkID 42170 --tokenList https://api.coinmarketcap.com/data-api/v3/uniswap/all.json --newArbifiedList ./src/ArbTokenLists/42170_arbed_coinmarketcap.json

          # - name: ArbGoerli Arbify CMC
          #   command: yarn arbify --l2NetworkID 421613 --tokenList https://api.coinmarketcap.com/data-api/v3/uniswap/all.json --newArbifiedList ./src/ArbTokenLists/421613_arbed_coinmarketcap.json
          # - name: ArbGoerli FullList
          #   command: yarn fullList --l2NetworkID 421613
    env:
      INFURA_KEY: '${{ secrets.INFURA_KEY }}'
      MAINNET_RPC: 'https://mainnet.infura.io/v3/${{ secrets.INFURA_KEY }}'
      GOERLI_RPC: 'https://goerli.infura.io/v3/${{ secrets.INFURA_KEY }}'
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/restore-cache

      - name: Use whitelist list cache
        uses: actions/cache@v3
        id: restore-whitelist
        with:
          path: ./src/ArbTokenLists/arbed_arb_whitelist_era.json
          key: ${{ github.sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: 'us-west-2'
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ${{ matrix.commands.name }}
        id: run_command
        if: success() || failure() # Always would allow manually canceled workflow to run
        run: |
          ${{ matrix.commands.command }}

      # - name: Deploy
      #   run: 'aws s3 sync ./src/ s3://${{ secrets.AWS_BUCKET }} --exclude "*" --include "FullList/*.json" --include "ArbTokenLists/*.json" --acl "public-read"'

      - name: Post to a Slack channel
        id: slack
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: 'C04QLBVM3HQ'
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Token list generation failed (${{ matrix.commands.name }})"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
